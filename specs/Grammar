(* Uses Extended-BNF to express pyjac's grammar *)
(* TODO: add ternary, negation, or, and, shortcut arithmetic, increment, decrement operators *)
(* A program is a sequence of function declarations, similar to C *)
<program> ::= <function>* 

<type_decl> ::= 'Arr:'* ('Int' | 'Str' | 'Double' | 'Bool') ':' 

<function> ::= 'func ' <type_decl> '(' <type_decl> <identifier> (',' <type_decl> <identifier>)* ')' '=>' <identifier> ':' <block> 

<identifier> ::= [a-zA-Z] ([a-zA-Z0-9] | '_')* 

(* blocks can be single line or a block *)
(* ident, end, and dedent tokens are generated by lexer depending on indentation levels *)  
<block> ::= <statement> 
|	    <ident> <statement> (<end> <statement>)* <dedent> 

<statement> ::= <if_statement> | <while_loop> | <for_loop> | <var_decl> | 'ret' <expression> 

<if_statement> ::= 'if' '(' <bool_expr> ')' ':' <block> ('elif' '(' <bool_expr> ')' ':' <block>)* ('else' ':' <block>)?  
<while_loop> ::= 'while' '(' <bool_expr> ')' ':' <block> 

<for_loop> ::= 'for' '(' <var_decl>? '|' <bool_expr>? '|' <expr>? ')' ':' <block> 

<var_decl> ::= 'var ' <type_decl> <identifier> '=' <expression>

<expression> ::= <literal> | <identifier> | <bool_expr> | <index_expr> | <call_expr> | <bin_expr> | <pre_expr> | <post_expr>

<bool_expr> ::= <expression> ( '>=' | '!=' | '<=' | '==' | '>' | '<' ) <expression> 

<index_expr> ::= <expression> '{' [0-9]+ '}' 

<call_expr> ::= <identfier> '(' <expression>* (',' <expression>)* ')' 

<bin_expr> ::= <expression> ( '=' | '+' | '-' | '*' | '/') <expression> 
